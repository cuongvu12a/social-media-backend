// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum FileCategory {
  THUMBNAIL_BOOK
  EBOOK
  MEDIA
  MAIN_PHOTO
  FILM
  TRAILER
}

model Account {
  id                    String                  @id @default(uuid())
  identityNumber        String                  @unique
  accountName           String?                 @unique
  lastName              String
  firstName             String
  email                 String                  @unique
  password              String
  birthday              DateTime?
  phoneNumber           String?
  role                  Role
  isActive              Boolean                 @default(true)

  files                 File[]

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?
}

model File {
  id                  String          @id @default(uuid())
  filename            String
  mimetype            String
  fileCategory        FileCategory

  accountId           String?
  account             Account?        @relation(fields: [accountId], references: [id])

  bookId              String?
  book                Book?           @relation(fields: [bookId], references: [id])

  authorId            String?        @unique
  author              Author?        @relation(fields: [authorId], references: [id])

  postId              String?
  post                Post?            @relation(fields: [postId], references: [id])

  casterId              String?       @unique
  caster                Caster?       @relation(fields: [casterId], references: [id])

  filmId              String?      
  film                Film?           @relation(fields: [filmId], references: [id])  

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
}

model Author {
  id                  String  @id @default(uuid())
  name                String

  books               Book[]
  posts               Post[]
  films               Film[]
  file                File?

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
}

model Publisher{
  id                  String  @id @default(uuid())
  name                String

  books               Book[]

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
}

model BookCategory {
  id       String         @id @default(uuid())
  parentId String?
  name     String?
  parent   BookCategory?  @relation("parentBookCategory", fields: [parentId], references: [id])
  children BookCategory[] @relation("parentBookCategory")
  books    Book[]         

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
}


model Book {
  id                  String  @id @default(uuid())
  identityNumber      String  @unique
  title               String
  content             String  @db.LongText()
  numberOfPages       Int?

  authorId            String? 
  author              Author?  @relation(fields: [authorId], references: [id])

  publishId           String?
  publisher           Publisher? @relation(fields: [publishId], references: [id])

  bookCategoryId      String?
  bookCategory        BookCategory? @relation(fields: [bookCategoryId], references: [id])

  file                File[]

  releaseAt           DateTime? 
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
}

model Post {
  id                  String  @id @default(uuid())
  identityNumber      String  @unique
  title               String
  content             String  @db.LongText()

  authorId            String? 
  author              Author?  @relation(fields: [authorId], references: [id])

  file                File[]
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
}

model Caster {
  id                  String  @id @default(uuid())
  name                String

  file                File?

  CastingFilm         CastingFilm[]

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?  
}

model Film {
  id                  String  @id @default(uuid())
  title               String
  subTitle            String
  description          String

  releaseAt           DateTime?

  filmCategoryId      String?
  filmCategory        FilmCategory? @relation(fields: [filmCategoryId], references: [id])

  CastingFilm         CastingFilm[]
  files               File[]

  authorId            String?
  author              Author? @relation(fields: [authorId], references: [id])

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
}

model CastingFilm {
  id                  String  @id @default(uuid())

  casterId            String  
  caster              Caster  @relation(fields: [casterId], references: [id])

  filmId            String  
  film              Film  @relation(fields: [filmId], references: [id])
}

model FilmCategory {
  id       String         @id @default(uuid())
  parentId String?
  name     String?

  parent   FilmCategory?  @relation("parentFilmCategory", fields: [parentId], references: [id])
  children FilmCategory[] @relation("parentFilmCategory")
  films    Film[]         

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?  
}