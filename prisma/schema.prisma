// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum FileCategory {
  THUMBNAIL_BOOK
  EBOOK
}

model Account {
  id                    String                  @id @default(uuid())
  identityNumber        String                  @unique
  accountName           String?                 @unique
  lastName              String
  firstName             String
  email                 String                  @unique
  password              String
  birthday              DateTime?
  phoneNumber           String?
  role                  Role
  isActive              Boolean                 @default(true)

  files                 File[]

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?
}

model File {
  id                  String          @id @default(uuid())
  filename            String
  mimetype            String
  fileCategory        FileCategory

  accountId           String?
  account             Account?        @relation(fields: [accountId], references: [id])

  bookId              String?
  book                Book?           @relation(fields: [bookId], references: [id])

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
}

model Author {
  id                  String  @id @default(uuid())
  name                String

  books               Book[]

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
}

model Publisher{
  id                  String  @id @default(uuid())
  name                String

  books               Book[]

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
}

model BookCategory {
  id       String         @id @default(uuid())
  parentId String?
  name     String?
  parent   BookCategory?  @relation("parentBookCategory", fields: [parentId], references: [id])
  children BookCategory[] @relation("parentBookCategory")
  books    Book[]         

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
}


model Book {
  id                  String  @id @default(uuid())
  identityNumber      String  @unique
  title               String
  content             String  @db.LongText()
  numberOfPages       Int?

  authorId            String? 
  author              Author?  @relation(fields: [authorId], references: [id])

  publishId           String?
  publisher           Publisher? @relation(fields: [publishId], references: [id])

  bookCategoryId      String?
  bookCategory        BookCategory? @relation(fields: [bookCategoryId], references: [id])

  file                File[]

  releaseAt           DateTime? 
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
}